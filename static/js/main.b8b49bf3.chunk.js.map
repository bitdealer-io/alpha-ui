{"version":3,"sources":["Map.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Map","_ref","initialPosition","markers","react_default","a","createElement","es_Map","style","height","center","zoom","TileLayer","attribution","url","map","marker","i","Marker","key","position","location","latitude","longitude","Popup","telegramUser","sellMinAmountEur","SearchBox","onTextChange","onSelect","selectedValue","selectedLocation","suggestions","_selectedLocation","Object","slicedToArray","lat","lon","className","placeholder","type","onChange","s","display_name","onClick","App","initialLocation","initialValue","state","currentLocation","_this","searchValue","searchSuggestions","isLoading","smartSuggest","text","fetch","concat","then","response","json","setState","fetchSellOrders","catch","console","error","_this$state$currentLo","this","_this2","_this$state","src_SearchBox","selected","_location","e","target","value","src_Map","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8b49bf3.chunk.js","sourcesContent":["import React from 'react';\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\n\nconst Map = ({initialPosition, markers}) => {\n  return (\n    <LeafletMap style={{ height: \"100vh\" }} center={initialPosition} zoom={14}>\n      <TileLayer\n        attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        markers.map((marker, i) =>\n          <Marker key={i} position={[marker.location.latitude, marker.location.longitude]}>\n            <Popup>\n              {marker.telegramUser} - â‚¬{marker.sellMinAmountEur}\n            </Popup>\n          </Marker>\n        )\n      }\n    </LeafletMap>\n  )\n}\n\n\nexport default Map;","import React from 'react';\n\nconst SearchBox = ({ onTextChange, onSelect, selectedValue, selectedLocation, suggestions }) => {\n  const [lat, lon] = selectedLocation;\n  return (\n    <div className=\"card\">\n      <header className=\"card-header\"><p className=\"card-header-title\">Search</p></header>\n      <div className=\"card-content\">\n        <form className=\"control has-icons-left has-icons-right\">\n          <input\n            className=\"input is-large\"\n            placeholder=\"Enter a city or GPS location (comma separated)\"\n            type=\"text\"\n            onChange={onTextChange}\n          />\n          <span className=\"icon is-medium is-left\">\n            <i className=\"fa fa-search\" />\n          </span>\n          <span className=\"icon is-medium is-right\">\n            <i className=\"fa fa-arrow-right\" />\n          </span>\n        </form>\n        <div className=\"buttons\">\n          {\n            suggestions.map((s, i) => {\n              const { lat, lon, display_name } = s;\n              return (\n                <span\n                  key={i}\n                  onClick={() => onSelect([lat, lon], display_name)}\n                  className=\"button is-link\"\n                >\n                  {display_name}\n                </span>\n              );\n            })\n          }\n        </div>\n      </div>\n      <footer className=\"card-footer\">\n        <span className=\"card-footer-item\">\n          <p className=\"title is-6\">{selectedValue}</p>\n        </span>\n        <span className=\"card-footer-item\">\n          <p className=\"subtitle is-6\">{lat},{lon}</p>\n        </span>\n      </footer>\n    </div>\n  )\n}\n\nexport default SearchBox;\n\n\n\n","import React, { Component } from 'react';\nimport Map from './Map';\nimport SearchBox from './SearchBox';\nimport './App.css';\n\nclass App extends Component {\n\n  initialLocation = [44.69, 10.63]\n  initialValue    = `Reggio nell'Emilia, RE, Emilia-Romagna, Italy`\n  state = {\n    currentLocation: this.initialLocation,\n    markers: [],\n    searchValue: this.initialValue,\n    searchSuggestions: [],\n    isLoading: true\n  }\n\n  smartSuggest = (text) =>\n    fetch(`https://nominatim.openstreetmap.org/search/${text}?format=json&limit=3`)\n      .then(response => response.json())\n      .then(searchSuggestions => this.setState({ searchSuggestions }))\n\n  fetchSellOrders = (latitude, longitude) => \n    fetch(`https://bitdealer-server.herokuapp.com/order/sell?location={\"lat\":${latitude},\"lon\":${longitude}}`)\n      .then(response => response.json())\n      .then(markers => this.setState({ markers, isLoading: false }))\n      .catch(console.error)\n\n  componentDidMount() {\n    const [latitude, longitude] = this.state.currentLocation;\n    this.fetchSellOrders(latitude, longitude);\n  }\n\n  render() {\n    const { isLoading, markers, currentLocation, searchValue, searchSuggestions } = this.state;\n\n    if (isLoading)\n      return <div className=\"box\">Loading...</div>;\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">BITDEALER.IO</h1>\n        <SearchBox \n          suggestions={searchSuggestions}\n          selectedValue={searchValue}\n          selectedLocation={currentLocation}\n          onSelect={(location, selected) => {\n            const [latitude, longitude] = location;\n            this.fetchSellOrders(latitude, longitude);\n            this.setState({ \n              searchSuggestions: [], \n              searchValue: selected,\n              currentLocation: location,\n            })\n          }}\n          onTextChange={e => this.smartSuggest(e.target.value)} \n        />\n        <Map \n          initialPosition={currentLocation}\n          markers={markers}\n        /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}